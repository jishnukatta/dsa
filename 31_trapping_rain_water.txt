class Solution {
public:
    int trap(vector<int>& height) {
        
        int n=height.size();

        int left[n],right[n];

        left[0]=height[0];
        for(int i=1;i<n;i++)
        {
           // cout<<left[i]<<" ";
           left[i]=max(height[i],left[i-1]);
        }
       right[n-1]=height[n-1];
       
       for(int i=n-2;i>=0;i--)
       {
           right[i]=max(right[i+1],height[i]);
       }

       int res=0;
       for(int i=0;i<n;i++)
       {
          res=res+min(left[i],right[i])-height[i];
       }
       return res;
    }
};


class Solution {
public:
    int trap(vector<int>& height) {
        
         int n=height.size();
         int left=0,right=n-1;
         int res=0;
         int leftMax=0,rightMax=0;

         while(left<=right)
         {
            if(height[left]<=height[right])
            {

                if(height[left]>=leftMax) leftMax=height[left];
                else res+=leftMax-height[left];
               
               left++;
            }
            else
            {
               if(height[right]>=rightMax) rightMax=height[right];
               else res+=rightMax-height[right];
                  right--;
            }

         }
         return res;
    }
};