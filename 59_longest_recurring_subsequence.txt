Memoization
1. express problem in terms of indices
2. explore all possibilites
3. sum up or find


class Solution {
	public:
	
	int Lcs(string s, string t, int n, int m,vector<vector<int>> &dp)
	{
	    
	    if(n<0 || m<0)
	    return 0;
	    
	    if(dp[n][m]!=-1)
	    return dp[n][m];
	    
	    if(s[n]==t[m] && n!=m) return dp[n][m]=1+Lcs(s,t,n-1,m-1,dp);
	    
	    else
	      return dp[n][m]=max(Lcs(s,t,n,m-1,dp),Lcs(s,t,n-1,m,dp));
	}
	
		int LongestRepeatingSubsequence(string str){
		    // Code here
		    int n=str.size();
		    vector<vector<int>> dp(n,vector<int>(n,-1));
		    return Lcs(str,str,str.size()-1,str.size()-1,dp);
		}

};


shifting of indexes 

class Solution {
	public:
	
	int Lcs(string s, string t, int n, int m,vector<vector<int>> &dp)
	{
	    
	    if(n==0 || m==0)
	    return 0;
	    
	    if(dp[n][m]!=-1)
	    return dp[n][m];
	    
	    if(s[n-1]==t[m-1] && n-1!=m-1) return dp[n][m]=1+Lcs(s,t,n-1,m-1,dp);
	    
	    else
	      return dp[n][m]=max(Lcs(s,t,n,m-1,dp),Lcs(s,t,n-1,m,dp));
	}
	
		int LongestRepeatingSubsequence(string str){
		    // Code here
		    int n=str.size();
		    vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
		    return Lcs(str,str,str.size(),str.size(),dp);
		}

};


tabular
1. base cases
2. loop over indices(states)
3. copy the recurrance



	int LongestRepeatingSubsequence(string str){
		    // Code here
		    int n=str.size();
		    int m=str.size();
		    vector<vector<int>> dp(n+1,vector<int>(n+1,0));
		    
		    string s=str;
		    string t=str;
		    
		    for(int i=0;i<=n;i++) dp[i][0]=0;
		    for(int j=0;j<=m;j++) dp[0][j]=0;
		    
		    
		    for(int i=1;i<=n;i++)
		    {
		        for(int j=1;j<=m;j++)
		        {
		            if(s[i-1]==t[j-1] && i-1!=j-1)
		             dp[i][j]=1+dp[i-1][j-1];
	    
	                  else
	                dp[i][j]= max(dp[i][j-1],dp[i-1][j]);
		        }
		    }
		    
		    return dp[n][m];
		    
		}



space optimization

int LongestRepeatingSubsequence(string str){
		    // Code here
		    int n=str.size();
		    int m=str.size();
		    vector<vector<int>> dp(n+1,vector<int>(n+1,0));
		    
		    vector<int> curr(m+1,0),prev(m+1,0);
		    
		    string s=str;
		    string t=str;
		    
		    for(int j=0;j<=m;j++) prev[j]=0;
		    
		    
		    for(int i=1;i<=n;i++)
		    {
		        for(int j=1;j<=m;j++)
		        {
		            if(s[i-1]==t[j-1] && i-1!=j-1)
		             curr[j]=1+prev[j-1];
	    
	                  else
	                curr[j]= max(curr[j-1],prev[j]);
		        }
		        prev=curr;
		    }
		    
		    return curr[m];
		    
		}
