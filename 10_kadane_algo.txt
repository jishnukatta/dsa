class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
        int max_end_here=nums[0];
        int max_so_far=nums[0];
        for(int i=1;i<nums.size();i++)
        {
            if(max_end_here+nums[i] > nums[i])            
            max_end_here=max_end_here+nums[i];
            else
            max_end_here=nums[i];

            max_so_far=max(max_so_far,max_end_here);
        }

       return max_so_far;

    }
};


(finding the indexes)
============
#include <climits>
#include <iostream>
using namespace std;
 
void maxSubArraySum(int a[], int size)
{
    int max_so_far = INT_MIN, max_ending_here = 0,
        start = 0, end = 0, s = 0;
 
    for (int i = 0; i < size; i++) {
        max_ending_here += a[i];
 
        if (max_so_far < max_ending_here) {
            max_so_far = max_ending_here;
            start = s;
            end = i;
        }                                                 
 
        if (max_ending_here < 0) {
            max_ending_here = 0;
            s = i + 1;
        }
    }
    cout << "Maximum contiguous sum is " << max_so_far
         << endl;
    cout << "Starting index " << start << endl
         << "Ending index " << end << endl;
}