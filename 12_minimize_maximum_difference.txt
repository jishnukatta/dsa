
class Solution {
public:
    int smallestRangeII(vector<int>& arr, int k) {
        

        sort(arr.begin(),arr.end());
        int n=arr.size();
        int res=arr[n-1]-arr[0];
        
        int left=arr[0]+k;
        int right=arr[n-1]-k;

        for(int i=1;i<n;i++)
        {
             int maxi=max(arr[i-1]+k,right);
             int mini=min(arr[i]-k,left);
             res=min(res,maxi-mini);
        }

       return res;
    }
};

solution based on avg height
class Solution {
public:
    int smallestRangeII(vector<int>& arr, int k) {
        
    int minHeight = *min_element(arr.begin(), arr.end());
    int maxHeight = *max_element(arr.begin(), arr.end());
 
    int n=arr.size();
    int initialDiff = maxHeight - minHeight;
 
    int avgHeight = (minHeight + maxHeight) / 2;
 
    for (int i = 0; i < n; i++) {
        if (arr[i] <= avgHeight) {
            arr[i] += k;
        }
        else {
            arr[i] -= k;
        }
    }
 
    int newMinHeight = *min_element(arr.begin(), arr.end());
    int newMaxHeight = *max_element(arr.begin(), arr.end());
 
    int newDiff = newMaxHeight - newMinHeight;
 
    
    return (newDiff > initialDiff) ? initialDiff : newDiff;
    }
};