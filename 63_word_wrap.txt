
class Solution {
public:


   int solve(vector<int> &nums, int i, int n , int k, int remLength,vector<vector<int>> & dp)
   {
       
       if(i==n-1)
       {
           if(nums[i]<remLength) return dp[i][remLength]=0;
           else
           return dp[i][remLength]=remLength*remLength;
       }
       
       if(dp[i][remLength]!=-1)
       return dp[i][remLength];
       
       if(nums[i]<remLength)
       {
           int keep = solve(nums, i+1, n, k, remLength==k? remLength - nums[i] : remLength - nums[i]-1,dp);
           int notkeep = (remLength*remLength)+solve(nums, i+1, n, k, k-nums[i],dp);
           
           return dp[i][remLength]=min(keep,notkeep);
           
       }
       
       else
       {
           return dp[i][remLength]=(remLength*remLength)+solve(nums, i+1, n, k, k-nums[i],dp);
       }
       
   }


    int solveWordWrap(vector<int>nums, int k) 
    { 
        // Code here
        int n=nums.size();
        vector<vector<int>> dp(n,vector<int>(k+1,-1));
        return solve(nums,0,nums.size(),k,k,dp);
    } 
};


