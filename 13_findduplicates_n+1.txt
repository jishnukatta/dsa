class Solution{
  public:
    vector<int> duplicates(int nums[], int n) {
        // code here
        vector<int> ans;
        for(int i=0;i<n;i++)
        {
            nums[nums[i]%n]=nums[nums[i]%n]+n;
        }

        for(int i=0;i<n;i++)
        {
            if(nums[i]/n>1)
            ans.push_back(i);
        }
        if(ans.size()==0)
        ans.push_back(-1);
        return ans;
    }
};




287. Find the Duplicate Number
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

without modifying the array nums and uses only constant extra space.

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        int n=nums.size();
        for(int i=0;i<nums.size();i++)
        {
            nums[nums[i]%n]=nums[nums[i]%n]+n;
        }

        for(int i=1;i<nums.size();i++)
        {
            //cout<<nums[i]<<endl;
            if(nums[i]/n>1)
            return i;
        }
        return -1;
    }
};