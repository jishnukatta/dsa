int countRev (string s)
{
    // your code here
    if(s.size()&1) return -1;
    
    
    stack<int> st;
        int c1=0,c2=0;

        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='{')
            {st.push('{'); c1++;}
            
            else
            {
                if(!st.empty() && st.top()=='{')
                {st.pop(); c1--;}
                else
                c2++;
            }
        }


        return ceil(c1/2.0)+ceil(c2/2.0);

}





You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.

A string is called balanced if and only if:

It is the empty string, or
It can be written as AB, where both A and B are balanced strings, or
It can be written as [C], where C is a balanced string.
You may swap the brackets at any two indices any number of times.

Return the minimum number of swaps to make s balanced.

 

class Solution {
public:
    int minSwaps(string s) {
        
        stack<int> st;
        int unbalanced=0;

        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='[')
            st.push('[');
            else
            {
                if(!st.empty() && st.top()=='[')
                st.pop();
                else
                unbalanced++;
            }
        }

        return (unbalanced+1)/2;

    }
};